/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as NoOrganizationImport } from './routes/no-organization'
import { Route as BlogsIndexImport } from './routes/blogs/index'
import { Route as UsersUserIdRouteImport } from './routes/users/$user-id/route'
import { Route as BlogsBlogIdRouteImport } from './routes/blogs/$blog-id/route'

// Create Virtual Routes

const IndexLazyImport = createFileRoute('/')()
const UsersIndexLazyImport = createFileRoute('/users/')()
const ProfileIndexLazyImport = createFileRoute('/profile/')()

// Create/Update Routes

const NoOrganizationRoute = NoOrganizationImport.update({
  id: '/no-organization',
  path: '/no-organization',
  getParentRoute: () => rootRoute,
} as any)

const IndexLazyRoute = IndexLazyImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/index.lazy').then((d) => d.Route))

const UsersIndexLazyRoute = UsersIndexLazyImport.update({
  id: '/users/',
  path: '/users/',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/users/index.lazy').then((d) => d.Route))

const ProfileIndexLazyRoute = ProfileIndexLazyImport.update({
  id: '/profile/',
  path: '/profile/',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/profile/index.lazy').then((d) => d.Route))

const BlogsIndexRoute = BlogsIndexImport.update({
  id: '/blogs/',
  path: '/blogs/',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/blogs/index.lazy').then((d) => d.Route))

const UsersUserIdRouteRoute = UsersUserIdRouteImport.update({
  id: '/users/$user-id',
  path: '/users/$user-id',
  getParentRoute: () => rootRoute,
} as any)

const BlogsBlogIdRouteRoute = BlogsBlogIdRouteImport.update({
  id: '/blogs/$blog-id',
  path: '/blogs/$blog-id',
  getParentRoute: () => rootRoute,
} as any).lazy(() =>
  import('./routes/blogs/$blog-id/route.lazy').then((d) => d.Route),
)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexLazyImport
      parentRoute: typeof rootRoute
    }
    '/no-organization': {
      id: '/no-organization'
      path: '/no-organization'
      fullPath: '/no-organization'
      preLoaderRoute: typeof NoOrganizationImport
      parentRoute: typeof rootRoute
    }
    '/blogs/$blog-id': {
      id: '/blogs/$blog-id'
      path: '/blogs/$blog-id'
      fullPath: '/blogs/$blog-id'
      preLoaderRoute: typeof BlogsBlogIdRouteImport
      parentRoute: typeof rootRoute
    }
    '/users/$user-id': {
      id: '/users/$user-id'
      path: '/users/$user-id'
      fullPath: '/users/$user-id'
      preLoaderRoute: typeof UsersUserIdRouteImport
      parentRoute: typeof rootRoute
    }
    '/blogs/': {
      id: '/blogs/'
      path: '/blogs'
      fullPath: '/blogs'
      preLoaderRoute: typeof BlogsIndexImport
      parentRoute: typeof rootRoute
    }
    '/profile/': {
      id: '/profile/'
      path: '/profile'
      fullPath: '/profile'
      preLoaderRoute: typeof ProfileIndexLazyImport
      parentRoute: typeof rootRoute
    }
    '/users/': {
      id: '/users/'
      path: '/users'
      fullPath: '/users'
      preLoaderRoute: typeof UsersIndexLazyImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexLazyRoute
  '/no-organization': typeof NoOrganizationRoute
  '/blogs/$blog-id': typeof BlogsBlogIdRouteRoute
  '/users/$user-id': typeof UsersUserIdRouteRoute
  '/blogs': typeof BlogsIndexRoute
  '/profile': typeof ProfileIndexLazyRoute
  '/users': typeof UsersIndexLazyRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexLazyRoute
  '/no-organization': typeof NoOrganizationRoute
  '/blogs/$blog-id': typeof BlogsBlogIdRouteRoute
  '/users/$user-id': typeof UsersUserIdRouteRoute
  '/blogs': typeof BlogsIndexRoute
  '/profile': typeof ProfileIndexLazyRoute
  '/users': typeof UsersIndexLazyRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexLazyRoute
  '/no-organization': typeof NoOrganizationRoute
  '/blogs/$blog-id': typeof BlogsBlogIdRouteRoute
  '/users/$user-id': typeof UsersUserIdRouteRoute
  '/blogs/': typeof BlogsIndexRoute
  '/profile/': typeof ProfileIndexLazyRoute
  '/users/': typeof UsersIndexLazyRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/no-organization'
    | '/blogs/$blog-id'
    | '/users/$user-id'
    | '/blogs'
    | '/profile'
    | '/users'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/no-organization'
    | '/blogs/$blog-id'
    | '/users/$user-id'
    | '/blogs'
    | '/profile'
    | '/users'
  id:
    | '__root__'
    | '/'
    | '/no-organization'
    | '/blogs/$blog-id'
    | '/users/$user-id'
    | '/blogs/'
    | '/profile/'
    | '/users/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexLazyRoute: typeof IndexLazyRoute
  NoOrganizationRoute: typeof NoOrganizationRoute
  BlogsBlogIdRouteRoute: typeof BlogsBlogIdRouteRoute
  UsersUserIdRouteRoute: typeof UsersUserIdRouteRoute
  BlogsIndexRoute: typeof BlogsIndexRoute
  ProfileIndexLazyRoute: typeof ProfileIndexLazyRoute
  UsersIndexLazyRoute: typeof UsersIndexLazyRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexLazyRoute: IndexLazyRoute,
  NoOrganizationRoute: NoOrganizationRoute,
  BlogsBlogIdRouteRoute: BlogsBlogIdRouteRoute,
  UsersUserIdRouteRoute: UsersUserIdRouteRoute,
  BlogsIndexRoute: BlogsIndexRoute,
  ProfileIndexLazyRoute: ProfileIndexLazyRoute,
  UsersIndexLazyRoute: UsersIndexLazyRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/no-organization",
        "/blogs/$blog-id",
        "/users/$user-id",
        "/blogs/",
        "/profile/",
        "/users/"
      ]
    },
    "/": {
      "filePath": "index.lazy.tsx"
    },
    "/no-organization": {
      "filePath": "no-organization.tsx"
    },
    "/blogs/$blog-id": {
      "filePath": "blogs/$blog-id/route.tsx"
    },
    "/users/$user-id": {
      "filePath": "users/$user-id/route.tsx"
    },
    "/blogs/": {
      "filePath": "blogs/index.tsx"
    },
    "/profile/": {
      "filePath": "profile/index.lazy.tsx"
    },
    "/users/": {
      "filePath": "users/index.lazy.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
